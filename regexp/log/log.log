	# profile gawk, créé Wed Oct 19 16:34:08 2016

	# BEGIN règle(s)

	BEGIN {
	}

	BEGIN {
     1  	fxsl = sprintf("%s%s", file_name, ".xsl")
     1  	printf "%s\n", xml_header(file_name, fxsl)
     1  	FS = "="
     1  	rownum = 0
	}

	# Règle(s)

    63  {
    63  	if (NR > 1 && NR % 9 == 1) { # 6
     6  		rownum++
     6  		xml(_version, _command, _real, _user, _sys, _hash, _nb_match_regex, _bytes_in_use_at_exit, _bytes_total_heap_usage)
		}
	}

    63  /VERSION/ { # 7
     7  	_version = $0
	}

    63  /TASKSET/ { # 7
     7  	_command = $0
	}

    63  /REAL/ { # 7
     7  	split($2, tab, ":")
     7  	_seconds = 60 * tab[1] + tab[2]
     7  	_real = sprintf("REAL=%s", _seconds)
	}

    63  /USER/ { # 7
     7  	_user = $0
	}

    63  /SYS/ { # 7
     7  	_sys = $0
	}

    63  /HASH/ { # 7
     7  	_hash = $0
	}

    63  /NB_LIGNES/ { # 7
     7  	_nb_match_regex = $0
	}

    63  /BYTES_IN_USE_AT_EXIT/ { # 7
     7  	_bytes_in_use_at_exit = $0
	}

    63  /BYTES_TOTAL_HEAP_USAGE/ { # 7
     7  	_bytes_total_heap_usage = $0
	}

	# END règle(s)

	END {
	}

	END {
     1  	rownum++
     1  	xml(_version, _command, _real, _user, _sys, _hash, _nb_match_regex, _bytes_in_use_at_exit, _bytes_total_heap_usage)
     1  	printf "%s\n", xml_bottom()
	}


	# Fonctions, par ordre alphabétique

   126  function even(x)
	{
   126  	return ! odd(x)
	}

   126  function odd(x)
	{
   126  	return (x % 2)
	}

    63  function replace_blank(x)
	{
    63  	return sprintf("%s", gensub(" ", "", "g", x))
	}

     7  function xml(_version, _command, _real, _user, _sys, _hash, _nb_match_regex, _bytes_in_use_at_exit, _bytes_total_heap_usage)
	{
     7  	printf "%s%s%s%s%s%s%s%s%s%s%s%s%s\n", "<ROW num=\"", rownum, "\">", xml_element(_version), xml_element(_command), xml_element(_real), xml_element(_user), xml_element(_sys), xml_element(_hash), xml_element(_nb_match_regex), xml_element(_bytes_in_use_at_exit), xml_element(_bytes_total_heap_usage), "</ROW>"
	}

     1  function xml_bottom()
	{
     1  	return sprintf("%s\n%s", "</ROWSET>", "</body>")
	}

    63  function xml_element(x)
	{
    63  	split(x, tab, "=")
    63  	x2 = ""
   126  	for (tabtmp in tab) {
   126  		if (even(tabtmp)) { # 63
    63  			_balise = replace_blank(tab[tabtmp - 1])
    63  			x2 = sprintf("<%s>%s</%s>", _balise, tab[tabtmp], _balise)
			}
		}
    63  	return x2
	}

     1  function xml_header(log_name, xmlxsl)
	{
     1  	return sprintf("%s\n%s%s%s\n%s\n<LOG_NAME>%s</LOG_NAME>\n<DATE>%s</DATE>\n%s", "<?xml version=\"1.0\" encoding=\"UTF-8\"?>", "<?xml-stylesheet type=\"text/xsl\" href=\"", xmlxsl, "\"?>", "<body>", log_name, strftime(), "<ROWSET>")
	}
